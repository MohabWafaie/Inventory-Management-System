using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using InventoryManagementSystem.Data;
using InventoryManagementSystem.Models;

namespace InventoryManagementSystem.Controllers
{
    class WithdrawPermitController
    {
        private readonly ApplicationDBContext _context;
        WithdrawPermitProductController wppc = new WithdrawPermitProductController();
        public WithdrawPermitController()
        {
            _context = new ApplicationDBContext();
        }
        public WithdrawPermitController(ApplicationDBContext context)
        {
            _context = context;
        }
        public void AddWithdrawPermit(WithdrawPermit permit, List<(int ProductId, int Quantity)> productData)
        {
            // Add the permit to the database
            _context.WithdrawPermits.Add(permit);
            _context.SaveChanges(); // Save to get PermitID if it's autogenerated

            ProductInWarehouseController pwc = new ProductInWarehouseController(_context);
            var data = pwc.GetAllProductsInWarehouse();

            foreach (var item in productData)
            {
                int remainingQuantity = item.Quantity;

                // Retrieve stock records for the product ordered by ExpiryDate ascending
                var stocks = (from s in data
                              where s.ProductId == item.ProductId && s.Quantity > 0
                              orderby s.ExpiryDate
                              select s).ToList();

                foreach (var stock in stocks)
                {
                    if (remainingQuantity <= 0)
                        break;

                    int withdrawQty = Math.Min(stock.Quantity, remainingQuantity);

                    // Create a WithdrawPermitProduct entry
                    var wpp = new WithdrawPermitProduct
                    {
                        WithdrawPermitId = permit.PermitID,
                        ProductId = item.ProductId,
                        StockID = stock.StockId,
                        Quantity = withdrawQty
                    };

                    wppc.AddWithdrawPermitProduct(wpp);

                    remainingQuantity -= withdrawQty;
                }

                if (remainingQuantity > 0)
                {
                    throw new InvalidOperationException($"Insufficient stock for ProductId {item.ProductId}");
                }
            }
            _context.SaveChanges();
        }

        public List<WithdrawPermit> GetAllWithdrawPermits()
        {
            return _context.WithdrawPermits.ToList();
        }
        public WithdrawPermit GetWithdrawPermitById(int id)
        {
            return _context.WithdrawPermits.Find(id);
        }
        public void DeleteWithdrawPermit(WithdrawPermit permit)
        {
            permit = _context.WithdrawPermits.Find(permit.PermitID);
            if (permit != null)
            {
                _context.WithdrawPermits.Remove(permit);
                _context.SaveChanges();
            }
        }
        public void UpdateWithdrawPermit(WithdrawPermit permit)
        {
            _context.WithdrawPermits.Update(permit);
            _context.SaveChanges();
        }
    }
}
